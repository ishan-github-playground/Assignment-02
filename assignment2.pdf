1.Statically Typed Language
A statically typed language is a programming language in which variable types are explicitly declared at compile-time and are checked for type correctness before the program is executed. This means that the data types of variables (such as integers, floats, strings, etc.) must be defined when the variables are declared, and the compiler enforces that only compatible types can be assigned to those variables.

Dynamically Typed Language
A dynamically typed language is a programming language in which variable types are determined at runtime rather than being explicitly declared at compile-time. In dynamically typed languages, you don't need to specify the data type of a variable when it is declared. Instead, the type of the variable is determined based on the value it holds when the code is executed.

Strongly Typed Language
A strongly typed language is a programming language that enforces strict type checking at compile-time or runtime, ensuring that variables and expressions are used in a consistent and well-defined manner. In a strongly typed language, data types must be explicitly declared and adhered to throughout the program's execution.

Loosely Typed Language
A loosely typed language (also known as weakly typed language) is a programming language that allows for implicit type conversions and flexible data type usage, often without explicit type declarations. In contrast to a strongly typed language, a loosely typed language is more permissive when it comes to mixing different data types in operations and assignments
java is statically typed and strongly typed language.

2.Case Sensitive
Case sensitivity in a programming language refers to the distinction between uppercase and lowercase letters when using identifiers such as variable names, function names, and keywords. In a case-sensitive language, "identifier" and "Identifier" would be treated as two different identifiers
ex:C, C++, Java, Swift, JavaScript, Python
Case Insensive
In a case-insensitive programming language, uppercase and lowercase letters are considered equivalent when using identifiers such as variable names, function names, and keywords. This means that "identifier" and "Identifier" are treated as the same identifier in a case-insensitive language.
ex:SQL, HTML, CSS, and XML
3.Identity Conversion

In Java, an identity conversion is a type conversion operation that involves converting a value of a specific data type to the same data type without any change in the actual value. In other words, an identity conversion does not alter the value of the variable being converted; it simply ensures that the variable remains of the same data type
ex:
int x = 10;
long y = x;

String str = "Hello";
String sameStr = str;

4.In Java, primitive widening conversion (also known as implicit widening conversion) is a type conversion that automatically promotes a value of a smaller data type to a larger data type without any loss of data. This conversion is performed by the Java compiler and is safe because the larger data type can hold all possible values of the smaller data type.
5.A compile-time constant, also known as a "compile-time constant expression," is a value that can be computed by the Java compiler at compile time. The value of a compile-time constant is known and fixed before the program is executed, and the compiler can replace occurrences of the constant with its actual value throughout the code.
final double pi=3.14;
A run-time constant is a value that can be determined and fixed only at runtime, i.e., during the execution of the program. The value of a run-time constant depends on the program's logic or some computation at runtime and cannot be determined during the compilation phase.
final double num=Math.random();

6.Implicit (Automatic) Narrowing Primitive Conversions:
Implicit narrowing primitive conversions occur when a value of a larger data type is assigned to a variable of a smaller data type without any explicit casting. In this conversion, the Java compiler automatically truncates or loses some data from the larger data type to fit it into the smaller data type.
condition -shoud be in a  rangeand compile time constant
Explicit Narrowing Conversions (Casting):
Explicit narrowing conversions, also known as casting, occur when a value of a larger data type is explicitly converted to a variable of a smaller data type using a cast operator. A cast is used to inform the Java compiler that the programmer is aware of potential data loss and wants to perform the conversion.

7.Despite the potential for data loss, the Java language allows implicit widening conversions from long to float. This is because the float data type can handle a larger magnitude of values than the long data type can represent without losing precision.

When assigning a long value to a float, the Java compiler performs the conversion automatically, and no explicit casting is required. However, it is important to be aware that the float type can only precisely represent a subset of long values, and any long value with more significant bits than the float type can handle may lose precision.

